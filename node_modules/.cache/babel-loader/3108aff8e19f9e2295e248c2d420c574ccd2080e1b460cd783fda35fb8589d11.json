{"ast":null,"code":"import { addString, insertBarCode } from \"./function-row.js\";\nimport { boldFont } from \"./function-backand-editor.js\";\nimport { transformStringBack } from \"./function-constructor-code.js\";\n\n//! Функции отвечающие за Парсинг\nconst parsing = {\n  parsingLogo: function (stringCode) {\n    stringCode = stringCode.split('^FO').join(''); //? Удаляем параметр ^FO\n    const top = Number(stringCode.match(/\\d+/)); //? Забираем значение отступа снизу\n    stringCode = stringCode.replace(/\\d+,/, ''); //? Удаляем значение отступа снизу\n    const left = Number(stringCode.match(/\\d+/)); //? Забираем второй параметр отступ слева\n    stringCode = stringCode.replace(/.*?\\^/, '^'); //? Удаляем второй параметр отступа снизу\n    let strCod = stringCode;\n    return [strCod, top, left];\n  },\n  //* Функция разбор и добавление строк бирки из бека\n  parsingString: function (stringCode) {\n    stringCode = stringCode.split('^FO').join(''); //? Отрезаем от строки ^FO\n    let height = Number(stringCode.match(/\\d+/)); //? Забираем первое значение вертикального отступа\n    stringCode = stringCode.replace(/\\d+,/, ''); //? Удаляем из общей строки вертикального отступа\n    let width = Number(stringCode.match(/\\d+/)); //? Забираем второй параметр отступ слева\n    stringCode = stringCode.replace(/\\d+\\^/, '^'); //? Удаляем из общей строки отступ слева\n    let position = String(stringCode.match(/.*?,/)); //? Получаем параметр позиции элемента\n    stringCode = stringCode.replace(/.*?,/, ''); //? Удаляем из строки позиции элементов\n    let size = String(stringCode.match(/(\\d+),(\\d+)/)); //? Пулучаем размер шрифта\n    let str = String(stringCode.replace(/.*?\\^FD/, '').split('^FS').join('')); //? Получаем содержимое строкового элемента\n    if (str.includes('<<')) {\n      str = str.replace(/</g, '&lt'); //? Экранирование символов <<\n    } else {}\n    ;\n    let bold = boldFont(position); //? Вычисляем жирность шрифта\n    let posit = transformStringBack(position); //? Вычисляем поворот строки\n    addString(str, width, height, size, bold, posit); //? Вставляем в див\n  },\n\n  parsingBarcode: function (stringCode) {\n    stringCode = stringCode.split('^FO').join(''); //? Отрезаем от строки ^FO\n    let height = Number(stringCode.match(/\\d+/)); //? Забираем первое значение вертикального отступа\n    stringCode = stringCode.replace(/\\d+,/, ''); //? Удаляем из общей строки вертикального отступа\n    let width = Number(stringCode.match(/\\d+/)); //? Забираем второй параметр отступ слева\n    insertBarCode(width, height);\n  }\n};\nexport const parsingLogo = parsing.parsingLogo;\nexport const parsingString = parsing.parsingString;\nexport const parsingBarcode = parsing.parsingBarcode;","map":{"version":3,"names":["addString","insertBarCode","boldFont","transformStringBack","parsing","parsingLogo","stringCode","split","join","top","Number","match","replace","left","strCod","parsingString","height","width","position","String","size","str","includes","bold","posit","parsingBarcode"],"sources":["C:/Users/Tror/Desktop/Project/Label-Editor-React/src/Components/function-parsing.js"],"sourcesContent":["import { addString, insertBarCode } from \"./function-row.js\";\r\nimport { boldFont } from \"./function-backand-editor.js\";\r\nimport { transformStringBack } from \"./function-constructor-code.js\";\r\n\r\n\r\n//! Функции отвечающие за Парсинг\r\nconst parsing = {\r\n    parsingLogo: function (stringCode) {\r\n        stringCode = stringCode.split('^FO').join('');                                                     //? Удаляем параметр ^FO\r\n        const top = Number(stringCode.match(/\\d+/));                                                       //? Забираем значение отступа снизу\r\n        stringCode = stringCode.replace(/\\d+,/, '');                                                       //? Удаляем значение отступа снизу\r\n        const left = Number(stringCode.match(/\\d+/));                                                      //? Забираем второй параметр отступ слева\r\n        stringCode = stringCode.replace(/.*?\\^/, '^');                                                     //? Удаляем второй параметр отступа снизу\r\n        let strCod = stringCode;\r\n        return [strCod, top, left];\r\n    },\r\n    //* Функция разбор и добавление строк бирки из бека\r\n    parsingString: function (stringCode) {\r\n        stringCode = stringCode.split('^FO').join('');                              //? Отрезаем от строки ^FO\r\n        let height = Number(stringCode.match(/\\d+/));                               //? Забираем первое значение вертикального отступа\r\n        stringCode = stringCode.replace(/\\d+,/, '');                                //? Удаляем из общей строки вертикального отступа\r\n        let width = Number(stringCode.match(/\\d+/));                                //? Забираем второй параметр отступ слева\r\n        stringCode = stringCode.replace(/\\d+\\^/, '^');                              //? Удаляем из общей строки отступ слева\r\n        let position = String(stringCode.match(/.*?,/));                            //? Получаем параметр позиции элемента\r\n        stringCode = stringCode.replace(/.*?,/, '');                                //? Удаляем из строки позиции элементов\r\n        let size = String(stringCode.match(/(\\d+),(\\d+)/));                         //? Пулучаем размер шрифта\r\n        let str = String(stringCode.replace(/.*?\\^FD/, '').split('^FS').join(''));  //? Получаем содержимое строкового элемента\r\n        if (str.includes('<<')) {\r\n            str = str.replace(/</g, '&lt');                                         //? Экранирование символов <<\r\n        } else { };\r\n        let bold = boldFont(position);                                              //? Вычисляем жирность шрифта\r\n        let posit = transformStringBack(position);                                  //? Вычисляем поворот строки\r\n        addString(str, width, height, size, bold, posit);                           //? Вставляем в див\r\n    },\r\n    parsingBarcode: function (stringCode) {\r\n        stringCode = stringCode.split('^FO').join('');                              //? Отрезаем от строки ^FO\r\n        let height = Number(stringCode.match(/\\d+/));                               //? Забираем первое значение вертикального отступа\r\n        stringCode = stringCode.replace(/\\d+,/, '');                                //? Удаляем из общей строки вертикального отступа\r\n        let width = Number(stringCode.match(/\\d+/));                                //? Забираем второй параметр отступ слева\r\n        insertBarCode(width, height);\r\n    }\r\n};\r\nexport const parsingLogo = parsing.parsingLogo;\r\nexport const parsingString = parsing.parsingString;\r\nexport const parsingBarcode = parsing.parsingBarcode;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}